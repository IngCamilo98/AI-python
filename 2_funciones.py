# -*- coding: utf-8 -*-
"""2_Funciones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14amMkowuPjMGgE3hUfEdAjWS253g995t
"""

import numpy as np
import matplotlib.pyplot as plt

"""##Funcion de activacion Sigmoid"""

def sigmoid(x, derivate=False):
  if derivate:
    return (np.exp(-x))/((np.exp(-x)+1)**2)
  else: 
    return 1 / (1+np.exp(-x))

x = np.linspace(10,-10,100)

plt.plot(x,sigmoid(x))

"""##Funcion de activacion Step"""

def step(a):
  return np.piecewise(x,[x<0.0, x>0.0],[0,1])

plt.plot(x,step(x))

"""##Funcion de activacion RELU"""

def relu(x, derivate=False):
  if derivate:
    x[x<=0] = 0
    x[x>0] = 1
    return x
  else:
    return np.maximum(0,x)

plt.plot(x,relu(x))

"""##Funcion de activacion Tangh"""

def tangh(a):
  return np.tanh(a)

plt.plot(x,tangh(x))

"""#Funcion de perdida"""

"""y es el valor real y y_hat es la prediccion"""
def mse(y, y_hat, derivate=False):
  if derivate:
    return (y_hat - y)
  else:
    return np.mean((y_hat - y)**2)

real = np.array([0,0,1,1])
prediccion = np.array([0.9, 0.5, 0.2, 0.0])

mse(real, prediccion)