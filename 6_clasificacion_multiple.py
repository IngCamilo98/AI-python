# -*- coding: utf-8 -*-
"""6_Clasificacion multiple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/131h4RsVvaH6G8fyHohYKLu4MCK-HnC5v
"""

import numpy as np
from keras import layers, models
from keras.datasets import reuters
import matplotlib.pyplot as plt
from keras import regularizers

(train_data, train_labels), (test_data, test_labels) = reuters.load_data(num_words=10000)

train_data.shape

world_index = reuters.get_word_index()
world_index = dict([(value, key) for (key, value) in world_index.items()])
for _ in train_data[0]:
  print(world_index.get(_ -3))

def vectorizar(sequences, dim=10000):
  results = np.zeros((len(sequences), dim))
  for i, sequences in enumerate(sequences):
    results[i, sequences] = 1
  return results

x_train = vectorizar(train_data)
x_test = vectorizar(test_data)

#Porque nuestro problema es de clasificacion categorica
from keras.utils import to_categorical

train_labels.shape

train_labels[0]

y_train = to_categorical(train_labels)
y_test = to_categorical(test_labels)

y_train.shape

model = models.Sequential()
model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dropout(0.5))
#Softmax es una funcion que nos da la probabilidad de n elementos en este caso 64
model.add(layers.Dense(46, activation='softmax'))

model.compile(optimizer='rmsprop',
              #categorical_crossentropy nos permite clasificar muchos elementos
              loss='categorical_crossentropy',
              metrics=['accuracy'])

x_val = x_train[:1000]
partial_x_train = x_train[1000:]

y_val = y_train[:1000]
partial_y_train = y_train[1000:]

history = model.fit(partial_x_train, partial_y_train,
          epochs=9,
          batch_size=512,
          validation_data= (x_val,y_val))

history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history.history['val_loss']

fig = plt.figure(figsize=(10,10))
epoch = range(1, len(loss_values)+1)
plt.plot(epoch, loss_values, 'o', label= 'Training')
plt.plot(epoch, val_loss_values, '--', label= 'Validation')
plt.legend()
plt.show()

history_dict = history.history
loss_values = history_dict['accuracy']
val_loss_values = history.history['val_accuracy']

fig = plt.figure(figsize=(10,10))
epoch = range(1, len(loss_values)+1)
plt.plot(epoch, loss_values, 'o', label= 'Training')
plt.plot(epoch, val_loss_values, '--', label= 'Validation')
plt.legend()
plt.show()

model.evaluate(x_test, y_test)

predictions = model.predict(x_test)

predictions[0]

#En las predicciones nos dan valores y un peso y su suma total de pesos es 1
np.sum(predictions[0])

# la probabilidad m√°s alta esta en 3
np.argmax(predictions[0])