# -*- coding: utf-8 -*-
"""5_Clasificacion Binaria.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YCXMf5BnMo4TARjYyTfztKMw-GyV49gp
"""

import numpy as np
from keras.datasets import imdb
from keras import models, layers, optimizers
import matplotlib.pyplot as plt

(train_data, train_labels),(test_data, test_labels) = imdb.load_data(num_words=10000)

train_data.shape

"""#Vamos a modificar los datos para poderselos pasar a keras. A keras hay que pasarle tensores en float32 mejor"""

world_index = imdb.get_word_index()
world_index

#Cambiamos la forma del diccionario 
world_index = dict([(value, key) for (key, value) in world_index.items()])
world_index

#Pasamos los numeros a palabras. el -3 es ya que hay digitos reservados hasta el 3
for _ in train_data[0]:
  print(world_index.get(_ -3))

def vectorizar(sequences, dim=10000):
  results = np.zeros((len(sequences), dim))
  for i, sequences in enumerate(sequences):
    results[i, sequences] = 1
  return results

#
x_train = vectorizar(train_data)
x_test = vectorizar(test_data)

#Y lo vamos a convertir a numero flotante
y_train = np.asarray(train_labels).astype('float32')
y_test = np.asarray(test_labels).astype('float32')

model = models.Sequential()
model.add(layers.Dense(16, activation= 'relu', input_shape = (10000,)))
model.add(layers.Dense(16, activation= 'relu'))
model.add(layers.Dense(1, activation= 'sigmoid'))

model.compile(optimizer= 'rmsprop',
              loss= 'binary_crossentropy',
              metrics='accuracy')

#Realizamos la data de validacion 
x_val = x_train[:10000]
partial_x_train = x_train[10000:]

y_val = y_train[:10000]
partial_y_train = y_train[10000:]

history = model.fit(partial_x_train, partial_y_train,
                    epochs = 20,
                    batch_size=512,
                    validation_data=(x_val, y_val))

history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']

epoch = range(1, len(loss_values)+1)
plt.plot(epoch, loss_values, 'o', label= 'training')
plt.plot(epoch, val_loss_values, '--', label= 'training')
plt.legend()
plt.show()
#hay overfiting por la

model.evaluate(x_test, y_test)

"""#Modelo menos complejo"""

model2 = models.Sequential()
model2.add(layers.Dense(4, activation= 'relu', input_shape = (10000,)))
model2.add(layers.Dense(4, activation= 'relu'))
model2.add(layers.Dense(1, activation= 'sigmoid'))

model2.compile(optimizer= 'rmsprop',
              loss= 'binary_crossentropy',
              metrics='accuracy')

history2 = model2.fit(partial_x_train, partial_y_train,
                    epochs = 20,
                    batch_size=512,
                    validation_data=(x_val, y_val))

history_dict = history.history
loss_values = history_dict['loss']
val_loss_values_2 = history2.history['val_loss']

epoch = range(1, len(loss_values)+1)
plt.plot(epoch, val_loss_values_2, 'o', label= 'Smaller')
plt.plot(epoch, val_loss_values, '--', label= 'Bigger')
plt.legend()
plt.show()

model2.evaluate(x_test, y_test)

"""#Regularizacion"""

from keras import regularizers

model3 = models.Sequential()
model3.add(layers.Dense(16, activation= 'relu', input_shape = (10000,),
                        kernel_regularizer=regularizers.l2(0.001)))
model3.add(layers.Dense(16, activation= 'relu',
                        kernel_regularizer=regularizers.l2(0.001)))
model3.add(layers.Dense(1, activation= 'sigmoid'))
model3.compile(optimizer= 'rmsprop',
              loss= 'binary_crossentropy',
              metrics='accuracy')

history3 = model3.fit(partial_x_train, partial_y_train,
                    epochs = 20,
                    batch_size=512,
                    validation_data=(x_val, y_val))

history_dict = history.history
loss_values = history_dict['loss']
val_loss_values_3 = history3.history['val_loss']

epoch = range(1, len(loss_values)+1)
plt.plot(epoch, val_loss_values_3, 'o', label= 'Regularizado')
plt.plot(epoch, val_loss_values, '--', label= 'Original')
plt.legend()
plt.show()

model3.evaluate(x_test, y_test)

"""#Probar el Dropout"""

model4 = models.Sequential()
model4.add(layers.Dense(4, activation= 'relu', input_shape = (10000,)))
#Vamos a desactivar el 50% de las neurionas en cada iteracion capa tras capa
model4.add(layers.Dropout(0.5))
model4.add(layers.Dense(4, activation= 'relu'))
model4.add(layers.Dropout(0.5))
model4.add(layers.Dense(1, activation= 'sigmoid'))

model4.compile(optimizer= 'rmsprop',
              loss= 'binary_crossentropy',
              metrics='accuracy')

history4 = model4.fit(partial_x_train, partial_y_train,
                    epochs = 20,
                    batch_size=512,
                    validation_data=(x_val, y_val))

history_dict = history.history
loss_values = history_dict['loss']
val_loss_values_4 = history4.history['val_loss']

epoch = range(1, len(loss_values)+1)
plt.plot(epoch, val_loss_values_4, 'o', label= 'Drooutizado')
plt.plot(epoch, val_loss_values, '--', label= 'Original')
plt.legend()
plt.show()

model4.evaluate(x_test, y_test)